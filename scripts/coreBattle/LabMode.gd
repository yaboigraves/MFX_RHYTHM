extends GameMode
#so the game mode is really controlled by a bunch of events that occur...
#the idea is that if a player fucks up too much they would count as failed somehow
#hmmm
#this is a bit tricky I want to use the same scene for each of these

#i should be careful with this and stwew a bit

#but I think that playing the game mode logic in a resource might be wise
#the idea is all of the gameplay code can be handled with back and forth like signals per scene
#so we can edit the logic of scenes individually?
#ahhh you know what this is actually a state machine

#yeah actually I like that

#single player goes between -> intro -> enemy drum -> player drum -> etc maybe break -> failure or into victory

#multiplayer is going back and forth between players turns
#pause mode can easily be added in this way too
#yeah and then we can share some states like victory n shit but permutate it just a bit
#ok I like that idea, state machine for game rules

#so the chasis JUST works to launch the state machine

#players can exist inside parallel to state machine too

#lab mode is just player input state -> pause state
#lab mode might have a special pause later for spawning stuff
#but it can basically be my guinea pig for this
#so theres no inherited class for a game mode, just a game mode scene with a state machine and all the relevant ui
#the root chasis can be quried for a tie in to the metronome, or just access it directly

#i feel good about this, take a break then crack it


func Start():
	player.StartInputSequence()


func MoveToNextPhase():
	player.MoveToNextPhase()
	
func End():
	pass
	

#win/lose condition, could be as simple as a key being pressed
func CheckEndCondition():
	pass

#look at the report generated by the player and figure out what to do next
func HandlePlayerPhaseEnd():
	pass


func _on_metronome_beat_update(timeInBeats) -> void:
	pass # Replace with function body.
